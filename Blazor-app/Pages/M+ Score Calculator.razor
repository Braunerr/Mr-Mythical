@page "/"
@using blazor_mrmythical.Data;
@using Services.Dungeons;
@inject ApiService apiService

<PageTitle>Mr. Mythical</PageTitle>

<br />
<br />
<div class="row">
    <div id="dungeons">
        <h2>Score Target:</h2>
        <input @bind="scoreGoal" @bind:event="oninput" @onkeyup="@(()=>calculateScore())"
            onkeypress="return event.keyCode!=13" type="text" name="scoreGoal" placeholder="Input Score" />
        <br />
        <br />
        <button class="primary" @onclick="showHide">Manual Edit</button>
        <br />
        <br />
        <button class="primary" @onclick="@(()=>GetCharacter("eu", "turalyon", "epichiche"))">Import Character</button>
        <br />
        <br />
        <table>
            <tr>
                <th width="40%">Keystone</th>
                <th width="25%">Fortified</th>
                <th width="25%">Tyrannical</th>
                <th width="10%" class="right">Rating</th>
            </tr>
            @foreach (var key in keys)
            {
                <tr class="line">
                    <td>@fortifiedRuns[key].dungeon</td>
                    <td>
                        @if (show)
                        {
                            
                                <button class="arrow" @onclick="@(()=>editKey(key, fortifiedRuns, true))"><svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-chevron-up" width="18" height="18" stroke-width="2" stroke="#e33b57" fill="none" stroke-linecap="round" stroke-linejoin="round" viewBox="5 8 14 8">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>                                 
                                <polyline points="6 15 12 9 18 15"></polyline></svg></button>

                                <button class="arrow" @onclick="@(()=>editKey(key, fortifiedRuns, false))"><svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-chevron-down" width="18" height="18" stroke-width="2" stroke="#e33b57" fill="none" stroke-linecap="round" stroke-linejoin="round" viewBox="5 8 14 8">                                 
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>                               
                                <polyline points="6 9 12 15 18 9"></polyline></svg></button>
                            
                        }
                        <span class="keyLevel">
                        @fortifiedRuns[key].mythicLevel
                        </span>
                        @if (show) {
                            foreach (var star in stars)
                            {
                                <button class="star"><svg xmlns="http://www.w3.org/2000/svg" id="icon-star" @onmouseover="@(()=>mouseOver(key, star, fortifiedStars))" @onmouseout="@(()=>mouseOut(key, star, fortifiedStars, fortifiedRuns))" width="18" height="18" viewBox="0 0 24 24" stroke-width="2" stroke="#e33b57" fill=@fortifiedStars[key][star] stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                <path d="M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z" />
                                </svg></button>
                            }
                        }
                    </td>
                    <td>
                        @if (show)
                        {
                            
                                <button class="arrow" @onclick="@(()=>editKey(key, tyrannicalRuns, true))"><svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-chevron-up" width="18" height="18" stroke-width="2" stroke="#e33b57" fill="none" stroke-linecap="round" stroke-linejoin="round" viewBox="5 8 14 8">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>                                 
                                <polyline points="6 15 12 9 18 15"></polyline></svg></button>

                                <button class="arrow" @onclick="@(()=>editKey(key, tyrannicalRuns, false))"><svg xmlns="http://www.w3.org/2000/svg" class="icon icon-tabler icon-tabler-chevron-down" width="18" height="18" stroke-width="2" stroke="#e33b57" fill="none" stroke-linecap="round" stroke-linejoin="round" viewBox="5 8 14 8">                                 
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"></path>                               
                                <polyline points="6 9 12 15 18 9"cd></polyline></svg></button>
                            
                        }
                        <span class="keyLevel">
                        @tyrannicalRuns[key].mythicLevel
                        </span>
                        @if (show) {

                            foreach (var star in stars)
                            {
                                <button class="star"><svg xmlns="http://www.w3.org/2000/svg" id="icon-star" @onmouseover="@(()=>mouseOver(key, star, tyrannicalStars))" @onmouseout="@(()=>mouseOut(key, star, tyrannicalStars, tyrannicalRuns))" width="18" height="18" viewBox="0 0 24 24" stroke-width="2" stroke="#e33b57" fill=@tyrannicalStars[key][star] stroke-linecap="round" stroke-linejoin="round">
                                <path stroke="none" d="M0 0h24v24H0z" fill="none"/>
                                <path d="M12 17.75l-6.172 3.245l1.179 -6.873l-5 -4.867l6.9 -1l3.086 -6.253l3.086 6.253l6.9 1l-5 4.867l1.179 6.873z" />
                                </svg></button>
                            }
                        }
                    </td>
                    <td class="right">@(fortifiedRuns[key].score + tyrannicalRuns[key].score)</td>
                </tr>
            }
            <tr>
                <td>Total Score</td>
                <td class="right"></td>
                <td class="right"></td>
                <td class="right">@(fortifiedRuns.Select(r => r.score).Sum() + tyrannicalRuns.Select(r => r.score).Sum())</td>
            </tr>
        </table>
    </div>

</div>

@code {
    string[][] fortifiedStars = new string[8][];
    string[][] tyrannicalStars = new string[8][];

    private void mouseOver(int key, int star, string[][] stars)
    {
        for (int i = 0; i < 3; i++)
        {
            if (i <= star)
            {
                stars[key][i] = "#e33b57";
            }
            else
            {
                stars[key][i] = "none";
            }
        }
    }

    private void mouseOut(int key, int star, string[][] stars, List<Run> runs)
    {
        for (int i = 0; i < 3; i++)
        {
            if (i >= runs[key].numKeystoneUpgrades)
            {
                stars[key][i] = "none";
            }
            else
            {
                stars[key][i] = "#e33b57";
            }
        }
    }

    private bool show = false;
    private void showHide()
    {
        show = !show;
    }

    private double scoreGoal;

    private static int dungeonCount = 8;
    private double scorePerDungeon;

    private int[] keys = new int[] {
        0, 1, 2, 3, 4, 5, 6, 7
    };
    private int[] stars = new int[] {
        0, 1, 2
    };

    private double bestAndAlternate;

    public BestDungeons? bestDungeons;
    public AlternateDungeons? alternateDungeons;

    Dungeons dungeons = new Dungeons();
    List<Run> fortifiedRuns;
    List<Run> tyrannicalRuns;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        fortifiedRuns = dungeons.fortified;
        tyrannicalRuns = dungeons.tyrannical;

        for (int i = 0; i < 8; i++)
        {
            fortifiedStars[i] = new string[3];
            tyrannicalStars[i] = new string[3];

            for (int j = 0; j < 3; j++)
            {
                if (j == 0)
                {
                    fortifiedStars[i][j] = "#e33b57";
                    tyrannicalStars[i][j] = "#e33b57";
                }
                else
                {
                    fortifiedStars[i][j] = "none";
                    tyrannicalStars[i][j] = "none";
                }
            }
        }
    }    

    private async void GetCharacter(string region, string realm, string name)
    {
        resetRuns();
        scoreGoal = 0;
        bestDungeons = await apiService.GetCharacterBest(region, realm, name);
        alternateDungeons = await apiService.GetCharacterAlternate(region, realm, name);

        var tempIndexFor = 0;

        for (int i = 0; i < bestDungeons.mythic_plus_best_runs.Count; i++)
        {
            if (bestDungeons.mythic_plus_best_runs[i].affixes[0].name == "Fortified") {
                fortifiedRuns[tempIndexFor].dungeon = bestDungeons.mythic_plus_best_runs[i].dungeon;
                fortifiedRuns[tempIndexFor].mythicLevel = bestDungeons.mythic_plus_best_runs[i].mythic_level;
                fortifiedRuns[tempIndexFor].numKeystoneUpgrades = bestDungeons.mythic_plus_best_runs[i].num_keystone_upgrades;
                fortifiedRuns[tempIndexFor].score = bestDungeons.mythic_plus_best_runs[i].score * 1.5;
                tempIndexFor++;
            } 
        }

        for (int i = 0; i < alternateDungeons.mythic_plus_alternate_runs.Count; i++)
        {
            if (alternateDungeons.mythic_plus_alternate_runs[i].affixes[0].name == "Fortified") {
                fortifiedRuns[tempIndexFor].dungeon = alternateDungeons.mythic_plus_alternate_runs[i].dungeon;
                fortifiedRuns[tempIndexFor].mythicLevel = alternateDungeons.mythic_plus_alternate_runs[i].mythic_level;
                fortifiedRuns[tempIndexFor].numKeystoneUpgrades = alternateDungeons.mythic_plus_alternate_runs[i].num_keystone_upgrades;
                fortifiedRuns[tempIndexFor].score = alternateDungeons.mythic_plus_alternate_runs[i].score * 0.5;
                tempIndexFor++;
            } 
        }

        for (int i = 0; i < bestDungeons.mythic_plus_best_runs.Count; i++)
        {
            if (bestDungeons.mythic_plus_best_runs[i].affixes[0].name == "Tyrannical") {
                int j = 0;
                while (bestDungeons.mythic_plus_best_runs[i].dungeon != fortifiedRuns[j].dungeon) {
                    j++;
                }
                tyrannicalRuns[j].dungeon = bestDungeons.mythic_plus_best_runs[i].dungeon;
                tyrannicalRuns[j].mythicLevel = bestDungeons.mythic_plus_best_runs[i].mythic_level;
                tyrannicalRuns[j].numKeystoneUpgrades = bestDungeons.mythic_plus_best_runs[i].num_keystone_upgrades;
                tyrannicalRuns[j].score = bestDungeons.mythic_plus_best_runs[i].score * 1.5;
            }
        }

        for (int i = 0; i < alternateDungeons.mythic_plus_alternate_runs.Count; i++)
        {
            if (alternateDungeons.mythic_plus_alternate_runs[i].affixes[0].name == "Tyrannical") {
                int j = 0;
                while (alternateDungeons.mythic_plus_alternate_runs[i].dungeon != fortifiedRuns[j].dungeon) {
                    j++;
                }
                tyrannicalRuns[j].dungeon = alternateDungeons.mythic_plus_alternate_runs[i].dungeon;
                tyrannicalRuns[j].mythicLevel = alternateDungeons.mythic_plus_alternate_runs[i].mythic_level;
                tyrannicalRuns[j].numKeystoneUpgrades = alternateDungeons.mythic_plus_alternate_runs[i].num_keystone_upgrades;
                tyrannicalRuns[j].score = alternateDungeons.mythic_plus_alternate_runs[i].score * 0.5;
            }
        }

        int n = dungeonCount;
        for (var i = 0; i < n - 1; i++)
        {
            for (var j = 0; j < n - i - 1; j++)
            {
                double combinedCurrent = tyrannicalRuns[j].score + fortifiedRuns[j].score;
                double combinedNext = tyrannicalRuns[j + 1].score + fortifiedRuns[j + 1].score;
                    
                if (combinedCurrent < combinedNext){
                    Run currentFor = fortifiedRuns[j];
                    Run currentTyr = tyrannicalRuns[j];

                    fortifiedRuns[j] = fortifiedRuns[j + 1];
                    tyrannicalRuns[j] = tyrannicalRuns[j + 1];

                    fortifiedRuns[j + 1] = currentFor;
                    tyrannicalRuns[j + 1] = currentTyr;
                }
            }
        }

        for (var i = 0; i < dungeonCount; i++){
            for (var j = 0; j < 3; j++)
            {
                if (j >= tyrannicalRuns[i].numKeystoneUpgrades)
                {
                    tyrannicalStars[i][j] = "none";
                } else
                {
                    tyrannicalStars[i][j] = "#e33b57";
                }
                if (j >= fortifiedRuns[i].numKeystoneUpgrades)
                {
                    fortifiedStars[i][j] = "none";
                } else
                {
                    fortifiedStars[i][j] = "#e33b57";
                }
                
            }
        }
        StateHasChanged();
    }

    private static double scoreFormula(int keyLevel)
    {
        double baseScore;
        if (keyLevel < 4)
        {
            baseScore = ((6 + keyLevel) * 5);
            return baseScore;
        }
        else if (keyLevel < 7)
        {
            baseScore = ((7 + keyLevel) * 5);
            return baseScore;
        }
        else if (keyLevel < 10)
        {
            baseScore = ((8 + keyLevel) * 5);
            return baseScore;
        }
        else
        {
            baseScore = (((keyLevel - 10) * 7) + 100);
            return baseScore;
        }
    }

    private void resetRuns() {
        for (var i = 0; i < dungeonCount; i++)
        {
            fortifiedRuns[i].dungeon = Convert.ToString(i + 1);
            fortifiedRuns[i].score = 0;
            fortifiedRuns[i].mythicLevel = 0;
            tyrannicalRuns[i].dungeon = Convert.ToString(i + 1);
            tyrannicalRuns[i].score = 0;
            tyrannicalRuns[i].mythicLevel = 0;
        }
    }
    private void calculateScore()
    {
        resetRuns();
        scorePerDungeon = scoreGoal / dungeonCount;

        if (scoreGoal >= 640)
        {
            for (var i = 0; i < 50; i++)
            {


                bestAndAlternate = Math.Round(scoreFormula(i) * 1.5 + scoreFormula(i) * 0.5);

                if (scorePerDungeon == bestAndAlternate)
                {
                    for (var j = 0; j < dungeonCount; j++)
                    {
                        fortifiedRuns[j].mythicLevel = i;
                        tyrannicalRuns[j].mythicLevel = i;

                        fortifiedRuns[j].score = bestAndAlternate / 2;
                        tyrannicalRuns[j].score = bestAndAlternate / 2;
                    }
                    break;
                }
                else if (bestAndAlternate > scorePerDungeon)
                {
                    bestAndAlternate = Math.Round(scoreFormula(i - 1) * 1.5 + scoreFormula(i - 1) * 0.5);
                    var scoreDiff = Math.Round(scoreGoal - bestAndAlternate * dungeonCount);

                    for (var j = 0; j < dungeonCount; j++)
                    {
                        if (scoreDiff > 0)
                        {
                            scoreDiff -= (scoreFormula(i) * 1.5) - (scoreFormula(i - 1) * 1.5);
                            fortifiedRuns[j].mythicLevel = i;
                            fortifiedRuns[j].score = scoreFormula(i) * 1.5;
                        }
                        else
                        {
                            fortifiedRuns[j].mythicLevel = i - 1;
                            fortifiedRuns[j].score = scoreFormula(i - 1) * 1.5;
                        }
                    }
                    for (var j = 0; j < dungeonCount; j++)
                    {
                        if (scoreDiff > 0)
                        {
                            scoreDiff -= (scoreFormula(i) * 0.5) - (scoreFormula(i - 1) * 0.5);
                            tyrannicalRuns[j].mythicLevel = i;
                            tyrannicalRuns[j].score = Math.Round((scoreFormula(i) * 0.5) * 10) / 10;
                        }
                        else if (scoreDiff / ((scoreFormula(i) * 0.5) - (scoreFormula(i - 1) * 0.5)) <= j - dungeonCount)
                        {
                            if (i != 3)
                            {
                                scoreDiff += (scoreFormula(i) * 0.5) - (scoreFormula(i - 1) * 0.5);
                                tyrannicalRuns[j].mythicLevel = i - 2;
                                tyrannicalRuns[j].score = Math.Round((scoreFormula(i - 2) * 0.5) * 10) / 10;
                            }
                            else
                            {
                                tyrannicalRuns[j].mythicLevel = i - 1;
                                tyrannicalRuns[j].score = Math.Round((scoreFormula(i - 1) * 0.5) * 10) / 10;
                            }
                        }
                        else
                        {
                            tyrannicalRuns[j].mythicLevel = i - 1;
                            tyrannicalRuns[j].score = Math.Round((scoreFormula(i - 1) * 0.5) * 10) / 10;
                        }
                    }
                    break;
                }
            }
        }
        else
        {
            var tempScore = scoreGoal;
            for (var i = 0; i < dungeonCount; i++)
            {
                if (tempScore > 0)
                {
                    tempScore -= 60;
                    fortifiedRuns[i].mythicLevel = 2;
                    fortifiedRuns[i].score += 60;
                }
                if (tempScore > 0)
                {
                    tempScore -= 20;
                    tyrannicalRuns[i].mythicLevel = 2;
                    tyrannicalRuns[i].score += 20;
                }
            }

        }
    }

    private void editKey(int key, List<Run> affix, bool up)
    {
        // When keys are below or equal to 2
        if (affix[key].mythicLevel < 2)
        {
            if (up && affix == fortifiedRuns)
            {
                fortifiedRuns[key].mythicLevel += 2;
                if (fortifiedRuns[key].mythicLevel > tyrannicalRuns[key].mythicLevel)
                {
                    fortifiedRuns[key].score += 60;
                }
                else if (fortifiedRuns[key].mythicLevel <= tyrannicalRuns[key].mythicLevel)
                {
                    fortifiedRuns[key].score += 20;
                }
            }
            else if (up && affix == tyrannicalRuns)
            {
                tyrannicalRuns[key].mythicLevel += 2;
                if (fortifiedRuns[key].mythicLevel < tyrannicalRuns[key].mythicLevel)
                {
                    tyrannicalRuns[key].score += 60;
                }
                else if (fortifiedRuns[key].mythicLevel >= tyrannicalRuns[key].mythicLevel)
                {
                    tyrannicalRuns[key].score += 20;
                }
            }
        }
        else if (affix[key].mythicLevel == 2 && !up)
        {
            if (affix == fortifiedRuns)
            {
                fortifiedRuns[key].mythicLevel -= 2;
                if (fortifiedRuns[key].mythicLevel >= tyrannicalRuns[key].mythicLevel)
                {
                    fortifiedRuns[key].score -= 60;
                }
                else if (fortifiedRuns[key].mythicLevel < tyrannicalRuns[key].mythicLevel)
                {
                    fortifiedRuns[key].score -= 20;
                }
            }
            else if (affix == tyrannicalRuns)
            {
                tyrannicalRuns[key].mythicLevel -= 2;
                if (fortifiedRuns[key].mythicLevel <= tyrannicalRuns[key].mythicLevel)
                {
                    tyrannicalRuns[key].score -= 60;
                }
                else if (fortifiedRuns[key].mythicLevel > tyrannicalRuns[key].mythicLevel)
                {
                    tyrannicalRuns[key].score -= 20;
                }
            }
        }
        // when keys are !equal to 2
        else if (up && affix[key].mythicLevel >= 2)
        {
            if (affix == fortifiedRuns)
            {
                fortifiedRuns[key].mythicLevel++;
                if (fortifiedRuns[key].mythicLevel > tyrannicalRuns[key].mythicLevel)
                {
                    fortifiedRuns[key].score += ((scoreFormula(fortifiedRuns[key].mythicLevel) * 1.5) - (scoreFormula(fortifiedRuns[key].mythicLevel - 1) * 1.5));
                }
                else if (fortifiedRuns[key].mythicLevel <= tyrannicalRuns[key].mythicLevel)
                {
                    fortifiedRuns[key].score += ((scoreFormula(fortifiedRuns[key].mythicLevel) * 0.5) - (scoreFormula(fortifiedRuns[key].mythicLevel - 1) * 0.5));
                }
            }
            else if (affix == tyrannicalRuns)
            {
                tyrannicalRuns[key].mythicLevel++;
                if (fortifiedRuns[key].mythicLevel < tyrannicalRuns[key].mythicLevel)
                {
                    tyrannicalRuns[key].score += ((scoreFormula(tyrannicalRuns[key].mythicLevel) * 1.5) - (scoreFormula(tyrannicalRuns[key].mythicLevel - 1) * 1.5));
                }
                else if (fortifiedRuns[key].mythicLevel >= tyrannicalRuns[key].mythicLevel)
                {
                    tyrannicalRuns[key].score += ((scoreFormula(tyrannicalRuns[key].mythicLevel) * 0.5) - (scoreFormula(tyrannicalRuns[key].mythicLevel - 1) * 0.5));
                }
            }
        }
        else if (!up && affix[key].mythicLevel != 2)
        {
            if (affix == fortifiedRuns)
            {
                fortifiedRuns[key].mythicLevel--;
                if (fortifiedRuns[key].mythicLevel >= tyrannicalRuns[key].mythicLevel)
                {
                    fortifiedRuns[key].score -= ((scoreFormula(fortifiedRuns[key].mythicLevel + 1) * 1.5) - (scoreFormula(fortifiedRuns[key].mythicLevel) * 1.5));
                }
            }
         
            else if (affix == tyrannicalRuns)
            {
                tyrannicalRuns[key].mythicLevel--;
                if (fortifiedRuns[key].mythicLevel <= tyrannicalRuns[key].mythicLevel)
                {
                    tyrannicalRuns[key].score -= ((scoreFormula(tyrannicalRuns[key].mythicLevel + 1) * 1.5) - (scoreFormula(tyrannicalRuns[key].mythicLevel) * 1.5));
                }
                else if (fortifiedRuns[key].mythicLevel > tyrannicalRuns[key].mythicLevel)
                {
                    fortifiedRuns[key].score -= ((scoreFormula(tyrannicalRuns[key].mythicLevel + 1) * 0.5) - (scoreFormula(tyrannicalRuns[key].mythicLevel) * 0.5));
                }
            }
        }
    }
}